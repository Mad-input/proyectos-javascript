---
import Layout from "../layouts/Layout.astro";
import "@fontsource/poppins";
---

<Layout title="Movie Seat">
  <main>
    <div class="movie-container">
      <label>
        Pick your a Movie:
        <select id="select">
          <option value="10">Spiderman (10$)</option>
          <option value="38">Toy Story (38$)</option>
          <option value="52">Joker (52$)</option>
          <option value="60">Batman (60$)</option>
        </select>
      </label>
    </div>
    <div class="tag">
      <span class="item">N/A</span>
      <span class="item">Selected</span>
      <span class="item">Ocupeid</span>
    </div>
    <div class="seats-container">
      <div class="display"></div>
      <div class="seats"></div>
    </div>
    <p class="info">
      You have selected <span id="countMovie">0</span> seatsfor a price of <span
        id="priceMovie">$0</span
      >
    </p>
  </main>
</Layout>

<style>
  body {
    --primary-color: rgb(186 132 255);
    background: #120f16;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100dvh;
    font-family: "Poppins", sans-serif;
    color: #fff;

    .movie-container {
      text-align: center;
      text-transform: uppercase;

      #select {
        margin-left: 30px;
        outline: none;
        padding: 5px 15px;
        border-radius: 20px;
      }
    }

    .tag {
      text-align: center;
      background: #1f1927;
      border-radius: 10px;
      margin-block: 30px;

      .item {
        font-size: 15px;
        margin: 0 10px;
        &::before {
          content: "";
          display: inline-block;
          background: rgba(255, 255, 255, 0.7);
          width: 14px;
          height: 12px;
          border-radius: 10px 10px 0 0;
          margin-right: 8px;
        }

        &:nth-child(2)::before {
          background: var(--primary-color);
        }
        &:nth-child(3)::before {
          background: #fff;
        }
      }
    }

    .seats-container {
      display: flex;
      justify-content: center;
      flex-direction: column;
      align-items: center;

      .display {
        width: 70%;
        height: 60px;
        background: #fff;
        margin-block: 20px;
        box-shadow: 0 0 12px 5px rgba(255, 255, 255, 0.7);
        animation: noise 4s alternate infinite;
      }
      .seats {
        --gap: 8px;
        --size: 15px;
        display: grid;
        grid-template-columns: repeat(10, var(--size));
        grid-auto-rows: 12px;
        gap: var(--gap);
        place-content: center;

        .seat {
          gap: 10px;
          background: #ededed;
          opacity: 0.5;
          border-radius: 15px 15px 0 0;
          cursor: pointer;
          &:hover {
            scale: 1.1;
          }
        }
        .seat.ocupied {
          background: #fff;
          opacity: 1;
          pointer-events: none;
          user-select: none;
        }
        .seat.selected {
          background: var(--primary-color);
        }
      }
    }
  }

  .info {
    text-align: center;
    margin-block: 20px;
    span {
      color: var(--primary-color);
    }
  }

  @keyframes noise {
    0% {
      background: #fff;
    }
    50% {
      background: #ededed;
    }
    100% {
      background: #cac9c9;
    }
  }
</style>

<script>
  const seats = [
    1,
    2,
    "s",
    3,
    4,
    5,
    6,
    "s",
    7,
    8,
    9,
    10,
    "s",
    11,
    0,
    0,
    14,
    "s",
    15,
    16,
    17,
    18,
    "s",
    19,
    20,
    21,
    22,
    "s",
    0,
    0,
    25,
    26,
    "s",
    27,
    28,
    29,
    30,
    "s",
    31,
    32,
    33,
    34,
    "s",
    35,
    0,
    0,
    38,
    "s",
    39,
    40,
    41,
    42,
    "s",
    43,
    44,
    0,
    0,
    "s",
    0,
    48,
  ];

  const containerSeats = document.querySelector(".seats"),
    priceMovie = document.getElementById("priceMovie"),
    countMovie = document.getElementById("countMovie"),
    selectMovie = document.getElementById("select");
  let valueSelect: any,
    count = 0,
    selected = 0,
    isSelecting = false;

  // render Seats
  const renderSeats = () => {
    const selectedMovies =
      JSON.parse(localStorage.getItem("SelectedMovies")) || [];
    // Recorrer todos los asientos del arr seats
    for (const path of seats) {
      // Por cada elemento crear un elemento span
      const seatHTML = document.createElement("span");
      if (path === 0) seatHTML.classList.add("ocupied");

      // Usar solo los asientos que tengan numeración
      if (typeof path != "string") {
        seatHTML.classList.add("seat");
        seatHTML.setAttribute("data-id", String(path));

        seatHTML.addEventListener("click", () => {
          if (isSelecting) return;
          isSelecting = true;
          // verificar que ya esten seleccionados
          if (seatHTML.classList.contains("selected")) {
            // Restar informacion si el asiento ya esta seleccionado
            count -= +selectMovie.value;
            selected--;
            countMovie.innerHTML = String(selected).padStart(2, "0");
            priceMovie.innerHTML = `$${count}`;
            seatHTML.classList.remove("selected");

            //remover elementos del storage
            // Encontrar el índice del asiento en el array de películas seleccionadas
            const indexToRemove = selectedMovies.indexOf(path);

            // Verificar si el asiento está en el array antes de intentar removerlo
            if (indexToRemove !== -1) {
              // Remover el asiento del array de películas seleccionadas
              selectedMovies.splice(indexToRemove, 1);
            }
          } else {
            seatHTML.classList.toggle("selected");
            //Seleccionar valores de la información
            selected++;
            count += +selectMovie.value;
            countMovie.innerHTML = String(selected).padStart(2, "0");
            priceMovie.innerHTML = `$${count}`;
            // Guardar indices selccionados en un arr
            if (!selectedMovies.includes(path)) {
              selectedMovies.push(path);
            }
          }
          saveInStorage(selectedMovies);
          setTimeout(() => {
            isSelecting = false;
          }, 500);
        });
      }
      function saveInStorage(arr: any[]) {
        localStorage.setItem("SelectedMovies", JSON.stringify(arr));
      }

      // Added seats to container
      containerSeats?.append(seatHTML);
    }
    //Redenrisar al recargar la pagina los asientos guardados
    const renderOfStorage = () => {
      //Recorrer los asientos guardados
      for (const i of selectedMovies) {
        let seatsHTML = Array.from(document.querySelectorAll(".seat"));
        for (const seatHTML of seatsHTML) {
          let id = +seatHTML.dataset.id;
          if (id == i) {
            let value = localStorage.getItem("value") || selectMovie.value;
            seatHTML.classList.add("selected");
            count = +value * selectedMovies.length;
            selected = selectedMovies.length;
            priceMovie.innerHTML = `$${count}`;
            countMovie.innerHTML = String(selected).padStart(2, "0");
          }
        }
      }
    };
    renderOfStorage();

    // Guardar el valor del select en local storage
    selectMovie.value = localStorage.getItem("value") || 10;
    selectMovie.addEventListener("change", () => {
      localStorage.setItem("value", selectMovie.value);
      renderOfStorage();
    });
  };
  renderSeats();
</script>
